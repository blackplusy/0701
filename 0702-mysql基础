代码版本管理工具
svn、git
1.svn架构
	c----                   /----          s
	客户端                               服务器
	192.168.6.110(开发)              192.168.7.136
	192.168.6.32(测试)
	192.168.7.2(运维)
2.客户端软件的安装(小乌龟)
	https://tortoisesvn.net/downloads.html
3.访问svn
	右键桌面--tortoise svn--repo xxx --填写svn服务器地址
	http://192.168.7.136/svn
	用户名:web
	密码:web
----------------------------------------------------------------------------
复习：
1.常见数据库软件
2.mysql的安装
3.环境变量设置
4.基础命令
5.表操作
	a.创建表结构
		create table 表 (
			列 数据类型,
			列 数据类型，
			...
		)
	b.修改表结构
		alter table 表 add 列 数据类型
		alter table 表 modify 列 数据类型
		alter table 表 drop column 数据类型
	c.删除表结构
		drop table 表;
6.数据的新增
	向表中指定列新增数据
		insert into 表(列1，列2.....) values(值1,值2...);
	向表中所有列新增数据
		insert into 表 values(值1，值2.....);
7.数据的修改
	update 表 set 列=值 where 条件;
8.数据的删除
	delete from 表 where 条件;
	truncate table 表;
9.SQL的分类
	ddl：create alter drop truncate
	dml：insert delete update
	dcl：grant revoke
	dql：select
10.ecshop网店搭建
-----------------------------------------------------------------------------------
参考资料:http://book.ecmoban.com/images/db.htm
1.数据的查询
	a.查询的分类
		简单查询
		多表查询
		分组查询
		子查询
	b.简单查询
		查询可以查询指定行、指定列、指定行的列
		字符类型数据、日期类型数据加单引号
		*代表所有列
		数字类型数据直接使用
		语法:select 列 from 表 where 条件;
		select后面 from 前面是和列相关，where条件是和行相关的
		查询指定行
		需求:查询ecs_goods表中商品名称是KD876的所有信息
		select * from ecs_goods where goods_name='KD876';
		查询指定列
		需求:查询ecs_goods表中所有商品名称
		select goods_name from ecs_goods;
		查询指定行的列
		需求:查询ecs_goods表中商品名称是KD876的本店售价
		select shop_price from ecs_goods where goods_name='KD876';
	C.where条件
		c1.比较
			>    大于
			<    小于
			=    等于
			>=
			<=
			!=   不等于
			<>   不等于
			需求:查询ecs_goods表中本店售价高于2000的商品的所有信息
			select * from ecs_goods where shop_price>2000;
			需求:查询ecs_goods表中商品名称是不是kd876的商品的名字
			select goods_name from ecs_goods where goods_name<>'kd876';
		c2.关系
			and  同时满足
			or   满足一个即可
			not  不满足
			需求:查询ecs_goods表中本店售价高于1000并且低于2000的所有商品名称和本店售价
			select goods_name,shop_price from ecs_goods where shop_price>1000 and shop_price<2000;
			需求:查询ecs_goods表中商品名称是kd876或者诺基亚的所有信息
			select * from ecs_goods where goods_name='kd876' or goods_name='诺基亚';
		c3.区间
			包含两个端点，小在前大在后
			between...and...
			需求:查询ecs_goods表中本店售价范围1600和3000之间的所有信息
			select * from ecs_goods where shop_price>=1600 and shop_price<=3000;
			select * from ecs_goods where shop_price between 1600 and 3000;
		c4.模糊查询
			当信息不完整时候使用，通常是和字符类型一起使用
			like
			_     一个字符
			%     任意个字符
			需求:查询ecs_goods表中商品名称是诺基亚开头的所有信息
			select * from ecs_goods where goods_name like '诺基亚%';
			需求:查询ecs_goods表中商品名称是6结尾的所有信息
			select * from ecs_goods where goods_name like '%6';
			需求:查询ecs_goods表中商品名称是6个字符的所有信息
			select * from ecs_goods where goods_name like '______';
		c5.空值查询(null)
			空没有任何数据类型，没有任何值,不能用于比较和运算，查询时候使用is null或者is not null
			查询ecs_goods表中suppliers_id为空的所有信息
			select * from ecs_goods where suppliers_id is null;
			查询ecs_goods表中suppliers_id为非空的所有信息
			select * from ecs_goods where suppliers_id is not null;
		c6.in(在...里面)
			in后面括号中内容为或的关系
			需求:查询ecs_goods表中商品名称是kd876或者诺基亚的所有信息
			select * from ecs_goods where goods_name in ('kd876','诺基亚');

2.多表查询
	当一张表中的数据无法满足条件时候，使用多张表
	a.笛卡尔积(集)
	当两张表不做任何关联产生的数据
	导致数据量成倍增加，无效数据增加，降低数据库性能，所以会使用内联查询、左联查询、右联查询
	select * from ecs_goods;
	select * from ecs_category;
	select * from ecs_category,ecs_goods;
	b.内联查询
	语法：
	select 列 from 表1，表2 where 表1.列=表2.列;
	select 列 from 表1 inner join 表2 on 表1.列=表2.列;
	判断关联列的方法
		1.名字相同
		2.作用相同
		3.主外键关系
	需求：查询商品名称是KD876的分类名称
		1.分析列
			商品名称
			分类名称
		2.分析列所在的表
			商品名称   ecs_goods
			分类名称   ecs_category
		3.关联
			select * from ecs_category,ecs_goods
			where ecs_category.cat_id=ecs_goods.cat_id;
		4.过滤
			select cat_name from ecs_category,ecs_goods
			where ecs_category.cat_id=ecs_goods.cat_id
			and goods_name='KD876';
	需求:查询分类名称是3G手机的商品名称有哪些？（cat_id）
		1.分析列
			分类名称
			商品名称
		2.分析表
			ecs_goods
			ecs_category
		3.关联
			select * from ecs_goods g,ecs_category c
			where g.cat_id=c.cat_id;
		4.过滤
			select g.goods_name from ecs_goods g,ecs_category c
			where g.cat_id=c.cat_id
			and c.cat_name='3G手机'	;

	需求1:查询分类名称是3G手机或者服装的商品名称有哪些
		1.分析列
			分类名称
			商品名称
		2.分析表
			ecs_goods
			ecs_category
		3.关联
			select * from ecs_goods g,ecs_category c
			where g.cat_id=c.cat_id;	
		4.过滤
			select g。goods_name from ecs_goods g,ecs_category c
			where g.cat_id=c.cat_id
			and c.cat_name='3G手机' or c.cat_name='服装';

    需求2：查询商品本店售价范围在2000和3000之间所有的商品的分类名称 
    	1.分析列
    		本店售价
    		分类名称
    	2.分析表
    		ecs_goods
    		ecs_category
    	3.关联			
    	    select * from ecs_goods g,ecs_category c
			where g.cat_id=c.cat_id;	
		4.过滤
			select c.cat_name from ecs_goods g,ecs_category c
			where g.cat_id=c.cat_id
			and g.shop_price between 2000 and 3000;
		补充：去重函数  distinct()
			select distinct(c.cat_name) from ecs_goods g,ecs_category c
			where g.cat_id=c.cat_id
			and g.shop_price between 2000 and 3000;
    需求3：查询分类名称是3G手机并且商品名称以诺基亚开头的商品名称 
    	1.分析列
    		分类名称
    		商品名称
    	2.分析表
    		ecs_goods
    		ecs_category
    	3.关联、过滤
    		select g.goods_name from ecs_goods g,ecs_category c
			where g.cat_id=c.cat_id
			and c.cat_name='3G手机'
			and g.goods_name like '诺基亚%';
	--1.jpg
		1.select * from test1 where department='计算机系' and place='北京';
		2.update test1 set department='信息学院' where department='计算机系';
		3.
		select t1.no,t1.name,t2.grade,t2.courses from test1 t1,test2 t2 
		where t1.no=t2.no
		and t1.grade>75;
	--2.jpg
		1.select s.name from achievement a,student s
		where a.id=s.id and a.mark>85;
		2.select count(id) from achievement where mark>=90;
		3.insert into achievement values(7,80);
		4.update achievement set mark=87 where id=3;
		5.delete from student where name='Betty';
		  delete from achievement where id=6;
	--4.jpg
		1.select s#,grade from sc where c#='C2';
		2.select sname from s where sname like 'D%';
		3.select  s.s#,s.sname from s,sc,c where s.s#=sc.s# and c.c#=sc.c# and c.cname='Maths';
		4.select s# from sc where c# in ('C2','C4');
3.安装部署sakila数据库
	a.下载sakila数据库压缩包
		https://dev.mysql.com/doc/index-other.html
	b.解压压缩包
	c.进入到已经解压好的文件夹下,地址栏中输入cmd
	d.登陆数据库
		mysql -u root -p
	e.导入sakila-schema.sql;
		source sakila-schema.sql;
	f.导入sakila-data.sql
		source sakila-data.sql;














